Index: src/main/java/org/example/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example;\n\nimport org.example.base.MyBot;\nimport org.telegram.telegrambots.meta.TelegramBotsApi;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\nimport org.telegram.telegrambots.updatesreceivers.DefaultBotSession;\n\npublic class Main {\n    public static void main(String[] args) throws TelegramApiException {\n        TelegramBotsApi telegramBotsApi=new TelegramBotsApi(DefaultBotSession.class);\n        telegramBotsApi.registerBot(new MyBot());\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/Main.java b/src/main/java/org/example/Main.java
--- a/src/main/java/org/example/Main.java	(revision 2a0946934ae5166588852c246a97493e9a7a8c80)
+++ b/src/main/java/org/example/Main.java	(date 1668001791764)
@@ -1,13 +1,6 @@
 package org.example;
-
-import org.example.base.MyBot;
-import org.telegram.telegrambots.meta.TelegramBotsApi;
-import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
-import org.telegram.telegrambots.updatesreceivers.DefaultBotSession;
-
 public class Main {
-    public static void main(String[] args) throws TelegramApiException {
-        TelegramBotsApi telegramBotsApi=new TelegramBotsApi(DefaultBotSession.class);
-        telegramBotsApi.registerBot(new MyBot());
+    public static void main(String[] args) {
+
     }
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"a4fc9641-2316-4031-ab2f-43e46a63fd9e\" name=\"Changes\" comment=\"upload\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Class\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"Ravshanbek\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitToolBoxStore\">\n    <option name=\"projectConfigVersion\" value=\"5\" />\n    <option name=\"recentBranches\">\n      <RecentBranches>\n        <option name=\"branchesForRepo\">\n          <list>\n            <RecentBranchesForRepo>\n              <option name=\"branches\">\n                <list>\n                  <RecentBranch>\n                    <option name=\"branchName\" value=\"master\" />\n                    <option name=\"lastUsedInstant\" value=\"1668000578\" />\n                  </RecentBranch>\n                  <RecentBranch>\n                    <option name=\"branchName\" value=\"Ravshanbek\" />\n                    <option name=\"lastUsedInstant\" value=\"1668000489\" />\n                  </RecentBranch>\n                </list>\n              </option>\n              <option name=\"repositoryRootUrl\" value=\"file://$PROJECT_DIR$\" />\n            </RecentBranchesForRepo>\n          </list>\n        </option>\n      </RecentBranches>\n    </option>\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"2HDfzlimAAwNjtHVkWIO2djBl8v\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\n    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,\n    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\n      <option name=\"filePath\" />\n      <method v=\"2\">\n        <option name=\"Make\" enabled=\"true\" />\n      </method>\n    </configuration>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"a4fc9641-2316-4031-ab2f-43e46a63fd9e\" name=\"Changes\" comment=\"\" />\n      <created>1667824842012</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1667824842012</updated>\n      <workItem from=\"1667825778955\" duration=\"688000\" />\n      <workItem from=\"1667879123345\" duration=\"680000\" />\n      <workItem from=\"1667883285499\" duration=\"340000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"git\">\n      <created>1667825893927</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1667825893929</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"r push\">\n      <created>1667879222231</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1667879222231</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"upload\">\n      <created>1667883621785</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1667883621785</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"4\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.History.Properties\">\n    <option name=\"SHOW_OTHER_BRANCHES\" value=\"true\" />\n    <option name=\"COLUMN_ID_ORDER\">\n      <list>\n        <option value=\"Default.Root\" />\n        <option value=\"Default.Author\" />\n        <option value=\"Default.Date\" />\n        <option value=\"Default.Subject\" />\n        <option value=\"Space.CommitStatus\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"3403b10f-3cdb-4f2e-80ec-a78bff25faf0\">\n          <value>\n            <State />\n          </value>\n        </entry>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"git\" />\n    <MESSAGE value=\"r push\" />\n    <MESSAGE value=\"upload\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"upload\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2a0946934ae5166588852c246a97493e9a7a8c80)
+++ b/.idea/workspace.xml	(date 1668001805007)
@@ -5,7 +5,8 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="a4fc9641-2316-4031-ab2f-43e46a63fd9e" name="Changes" comment="upload">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/org/example/base/MyBot.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/org/example/base/MyBot.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -38,7 +39,7 @@
                 <list>
                   <RecentBranch>
                     <option name="branchName" value="master" />
-                    <option name="lastUsedInstant" value="1668000578" />
+                    <option name="lastUsedInstant" value="1668001792" />
                   </RecentBranch>
                   <RecentBranch>
                     <option name="branchName" value="Ravshanbek" />
Index: src/main/java/org/example/base/MyBot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.base;\n\nimport org.telegram.telegrambots.bots.TelegramLongPollingBot;\nimport org.telegram.telegrambots.meta.api.methods.send.SendMessage;\nimport org.telegram.telegrambots.meta.api.objects.Message;\nimport org.telegram.telegrambots.meta.api.objects.Update;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;\nimport org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;\nimport org.telegram.telegrambots.meta.exceptions.TelegramApiException;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\npublic class MyBot extends TelegramLongPollingBot implements BaseBot {\n\n    @Override\n    public String getBotUsername() {\n        return BOT_USERNAME;\n    }\n\n    @Override\n    public String getBotToken() {\n        return BOT_TOKEN;\n    }\n\n    @Override\n    public void onUpdateReceived(Update update) {\n        if (update.hasMessage()) {\n            Message message = update.getMessage();\n            Long chatId = message.getChatId();\n            if (message.hasText()) {\n                String text = message.getText();\n\n                if (text.equals(\"/start\")) {\n                    myExecute(\n                            replyKeyboardMarkup(List.of(\"Byurtma berish\", \"Buyurtmalarim\", \"Sozlamalr\", \"Biz haqimizda\", \"Fikr qolditing\"), 2), null, \"Welcome to bot\" + message.getChat().getFirstName(), chatId);\n                } else if (text.equals(\"Byurtma berish\")) {\n                    myExecute(replyKeyboardMarkup(List.of(\"Joy bant qilish\", \"Ovqat dastavka\"), 1), null, null, chatId);\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onUpdatesReceived(List<Update> updates) {\n        super.onUpdatesReceived(updates);\n    }\n\n    @Override\n    public void onRegister() {\n        super.onRegister();\n    }\n\n    private ReplyKeyboardMarkup replyKeyboardMarkup(List<String> menuItems, int n) {\n        ReplyKeyboardMarkup r = new ReplyKeyboardMarkup();\n        r.setResizeKeyboard(true);\n        List<KeyboardRow> buttonRow = new ArrayList<>();\n        KeyboardRow keyboardButtons = new KeyboardRow();\n        for (int i = 0; i < menuItems.size(); i++) {\n            keyboardButtons.add(new KeyboardButton(menuItems.get(i)));\n            if (i % n == 0) {\n                buttonRow.add(keyboardButtons);\n                keyboardButtons = new KeyboardRow();\n            }\n        }\n        if (keyboardButtons.size() > 0) {\n            buttonRow.add(keyboardButtons);\n        }\n        r.setKeyboard(buttonRow);\n        return r;\n    }\n\n\n    private void myExecute(ReplyKeyboardMarkup r, InlineKeyboardMarkup i, String text, Long chatId) {\n        SendMessage sendMessage = new SendMessage();\n        sendMessage.setText(text);\n        sendMessage.setChatId(chatId.toString());\n        sendMessage.setReplyMarkup(r == null ? i : r);\n        try {\n            execute(sendMessage);\n        } catch (TelegramApiException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String getKey(Map<String, InlineKeyboardMarkup> map) {\n        for (Map.Entry<String, InlineKeyboardMarkup> pair : map.entrySet()) {\n            return pair.getKey();\n        }\n        return null;\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/base/MyBot.java b/src/main/java/org/example/base/MyBot.java
--- a/src/main/java/org/example/base/MyBot.java	(revision 2a0946934ae5166588852c246a97493e9a7a8c80)
+++ b/src/main/java/org/example/base/MyBot.java	(date 1668000930593)
@@ -1,96 +1,96 @@
-package org.example.base;
-
-import org.telegram.telegrambots.bots.TelegramLongPollingBot;
-import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
-import org.telegram.telegrambots.meta.api.objects.Message;
-import org.telegram.telegrambots.meta.api.objects.Update;
-import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
-import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
-import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
-import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
-import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
-
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-
-public class MyBot extends TelegramLongPollingBot implements BaseBot {
-
-    @Override
-    public String getBotUsername() {
-        return BOT_USERNAME;
-    }
-
-    @Override
-    public String getBotToken() {
-        return BOT_TOKEN;
-    }
-
-    @Override
-    public void onUpdateReceived(Update update) {
-        if (update.hasMessage()) {
-            Message message = update.getMessage();
-            Long chatId = message.getChatId();
-            if (message.hasText()) {
-                String text = message.getText();
-
-                if (text.equals("/start")) {
-                    myExecute(
-                            replyKeyboardMarkup(List.of("Byurtma berish", "Buyurtmalarim", "Sozlamalr", "Biz haqimizda", "Fikr qolditing"), 2), null, "Welcome to bot" + message.getChat().getFirstName(), chatId);
-                } else if (text.equals("Byurtma berish")) {
-                    myExecute(replyKeyboardMarkup(List.of("Joy bant qilish", "Ovqat dastavka"), 1), null, null, chatId);
-                }
-            }
-        }
-    }
-
-    @Override
-    public void onUpdatesReceived(List<Update> updates) {
-        super.onUpdatesReceived(updates);
-    }
-
-    @Override
-    public void onRegister() {
-        super.onRegister();
-    }
-
-    private ReplyKeyboardMarkup replyKeyboardMarkup(List<String> menuItems, int n) {
-        ReplyKeyboardMarkup r = new ReplyKeyboardMarkup();
-        r.setResizeKeyboard(true);
-        List<KeyboardRow> buttonRow = new ArrayList<>();
-        KeyboardRow keyboardButtons = new KeyboardRow();
-        for (int i = 0; i < menuItems.size(); i++) {
-            keyboardButtons.add(new KeyboardButton(menuItems.get(i)));
-            if (i % n == 0) {
-                buttonRow.add(keyboardButtons);
-                keyboardButtons = new KeyboardRow();
-            }
-        }
-        if (keyboardButtons.size() > 0) {
-            buttonRow.add(keyboardButtons);
-        }
-        r.setKeyboard(buttonRow);
-        return r;
-    }
-
-
-    private void myExecute(ReplyKeyboardMarkup r, InlineKeyboardMarkup i, String text, Long chatId) {
-        SendMessage sendMessage = new SendMessage();
-        sendMessage.setText(text);
-        sendMessage.setChatId(chatId.toString());
-        sendMessage.setReplyMarkup(r == null ? i : r);
-        try {
-            execute(sendMessage);
-        } catch (TelegramApiException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    private String getKey(Map<String, InlineKeyboardMarkup> map) {
-        for (Map.Entry<String, InlineKeyboardMarkup> pair : map.entrySet()) {
-            return pair.getKey();
-        }
-        return null;
-    }
-}
-
+//package org.example.base;
+//
+//import org.telegram.telegrambots.bots.TelegramLongPollingBot;
+//import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
+//import org.telegram.telegrambots.meta.api.objects.Message;
+//import org.telegram.telegrambots.meta.api.objects.Update;
+//import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
+//import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
+//import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
+//import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
+//import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
+//
+//import java.util.ArrayList;
+//import java.util.List;
+//import java.util.Map;
+//
+//public class MyBot extends TelegramLongPollingBot implements BaseBot {
+//
+//    @Override
+//    public String getBotUsername() {
+//        return BOT_USERNAME;
+//    }
+//
+//    @Override
+//    public String getBotToken() {
+//        return BOT_TOKEN;
+//    }
+//
+//    @Override
+//    public void onUpdateReceived(Update update) {
+//        if (update.hasMessage()) {
+//            Message message = update.getMessage();
+//            Long chatId = message.getChatId();
+//            if (message.hasText()) {
+//                String text = message.getText();
+//
+//                if (text.equals("/start")) {
+//                    myExecute(
+//                            replyKeyboardMarkup(List.of("Byurtma berish", "Buyurtmalarim", "Sozlamalr", "Biz haqimizda", "Fikr qolditing"), 2), null, "Welcome to bot" + message.getChat().getFirstName(), chatId);
+//                } else if (text.equals("Byurtma berish")) {
+//                    myExecute(replyKeyboardMarkup(List.of("Joy bant qilish", "Ovqat dastavka"), 1), null, null, chatId);
+//                }
+//            }
+//        }
+//    }
+//
+//    @Override
+//    public void onUpdatesReceived(List<Update> updates) {
+//        super.onUpdatesReceived(updates);
+//    }
+//
+//    @Override
+//    public void onRegister() {
+//        super.onRegister();
+//    }
+//
+//    private ReplyKeyboardMarkup replyKeyboardMarkup(List<String> menuItems, int n) {
+//        ReplyKeyboardMarkup r = new ReplyKeyboardMarkup();
+//        r.setResizeKeyboard(true);
+//        List<KeyboardRow> buttonRow = new ArrayList<>();
+//        KeyboardRow keyboardButtons = new KeyboardRow();
+//        for (int i = 0; i < menuItems.size(); i++) {
+//            keyboardButtons.add(new KeyboardButton(menuItems.get(i)));
+//            if (i % n == 0) {
+//                buttonRow.add(keyboardButtons);
+//                keyboardButtons = new KeyboardRow();
+//            }
+//        }
+//        if (keyboardButtons.size() > 0) {
+//            buttonRow.add(keyboardButtons);
+//        }
+//        r.setKeyboard(buttonRow);
+//        return r;
+//    }
+//
+//
+//    private void myExecute(ReplyKeyboardMarkup r, InlineKeyboardMarkup i, String text, Long chatId) {
+//        SendMessage sendMessage = new SendMessage();
+//        sendMessage.setText(text);
+//        sendMessage.setChatId(chatId.toString());
+//        sendMessage.setReplyMarkup(r == null ? i : r);
+//        try {
+//            execute(sendMessage);
+//        } catch (TelegramApiException e) {
+//            throw new RuntimeException(e);
+//        }
+//    }
+//
+//    private String getKey(Map<String, InlineKeyboardMarkup> map) {
+//        for (Map.Entry<String, InlineKeyboardMarkup> pair : map.entrySet()) {
+//            return pair.getKey();
+//        }
+//        return null;
+//    }
+//}
+//
